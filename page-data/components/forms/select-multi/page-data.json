{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/select-multi/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"d2816e99-3fb8-5811-81b5-4aca87513bdf","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"SelectMulti\",\n  \"figma\": \"file/2MG6DoSjk4IaLnjjFCnKFf/Forms\",\n  \"github\": \"Form/Inputs/Select/SelectMulti.tsx\",\n  \"propsOf\": \"SelectMulti\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SelectMulti\"), \" component is an extension of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/forms/select\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Select\")), \" component that supports multiple selected values and has the following specific features:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The input field renders an underlying \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/components/forms/input-chips\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputChips\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An on-the-fly \\\"Create\\\" option allows the user to enter custom values (see \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#showcreate\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"showCreate\")), \" prop)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Option list stays open by default so the user can select multiple options (see \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#closeonselect\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"closeOnSelect\")), \" prop)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Values can be cleared individually or all at once (does not use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Select\"), \" component's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isClearable\"), \" prop)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space>\\n  <SelectMulti\\n    options={[\\n      { value: 'Cheddar' },\\n      { value: 'Gouda' },\\n      { value: 'Swiss' },\\n      { value: 'Feta' },\\n      { value: 'Mascarpone' },\\n      { value: 'Brie' },\\n      { value: 'Mozzarella' },\\n      { value: 'Cotija' },\\n      { value: 'Pepperjack' },\\n    ]}\\n    placeholder=\\\"Cheeses\\\"\\n    flex={1}\\n  />\\n  <SelectMulti\\n    options={[\\n      { value: '0', label: 'Sunday' },\\n      { value: '1', label: 'Monday' },\\n      { value: '2', label: 'Tuesday' },\\n      { value: '3', label: 'Wednesday' },\\n      { value: '4', label: 'Thursday' },\\n      { value: '5', label: 'Friday' },\\n      { value: '6', label: 'Saturday' },\\n    ]}\\n    defaultValues={['1']}\\n    flex={1}\\n  />\\n</Space>\\n\")), mdx(\"h2\", null, \"showCreate\"), mdx(\"p\", null, \"As with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Select\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isFilterable\"), \" prop allows the user to type in the input, triggering the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onFilter\"), \" callback,\\nwhich should be used to narrow the options passed to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SelectMulti\"), \".\"), mdx(\"p\", null, \"When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isFilterable\"), \" is true, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"showCreate\"), \" prop along with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"formatCreateLabel\"), \"(defaults to 'Create \\\"\", \"[input value]\", \"\\\"')\\nto allow the user to free-form values.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [values, setValues] = React.useState([])\\n  const [searchTerm, setSearchTerm] = React.useState('')\\n\\n  function handleChange(newValues) {\\n    setValues(newValues)\\n  }\\n  function handleFilter(term) {\\n    setSearchTerm(term)\\n  }\\n\\n  const newOptions = React.useMemo(() => {\\n    const options = [\\n      { value: 'Apples' },\\n      { value: 'Bananas' },\\n      { value: 'Oranges' },\\n      { value: 'Pineapples' },\\n      { value: 'Kiwis' },\\n    ]\\n    if (searchTerm === '') return options\\n    return options.filter((option) => {\\n      return option.value.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1\\n    })\\n  }, [searchTerm])\\n\\n  function formatCreateLabel(inputValue) {\\n    return `Add new fruit: ${inputValue}`\\n  }\\n\\n  return (\\n    <SelectMulti\\n      options={newOptions}\\n      aria-label=\\\"Fruits\\\"\\n      placeholder=\\\"Controlled, searchable, creatable\\\"\\n      isFilterable\\n      values={values}\\n      onChange={handleChange}\\n      onFilter={handleFilter}\\n      showCreate\\n      formatCreateLabel={formatCreateLabel}\\n      createOptionPosition=\\\"first\\\"\\n    />\\n  )\\n}\\n\")), mdx(\"h2\", null, \"closeOnSelect\"), mdx(\"p\", null, \"With the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"closeOnSelect\"), \" prop, the option list closes after an option is selected.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<SelectMulti\\n  options={[\\n    { value: 'Cheddar' },\\n    { value: 'Gouda' },\\n    { value: 'Swiss' },\\n    { value: 'Feta' },\\n    { value: 'Mascarpone' },\\n    { value: 'Brie' },\\n    { value: 'Mozzarella' },\\n    { value: 'Cotija' },\\n    { value: 'Pepperjack' },\\n  ]}\\n  defaultValues={['Swiss', 'Brie']}\\n  closeOnSelect\\n/>\\n\")), mdx(\"h2\", null, \"freeInput\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"freeInput\"), \" prop when the user needs to be able to easily enter values not found in the list of options.\\nThis enables the inputting behavior of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/forms/input-chips/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputChips\")), \" where values are separated\\nby the enter key, comma, or tab or newline character when pasting.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<SelectMulti\\n  options={[\\n    { value: 'Cheddar' },\\n    { value: 'Gouda' },\\n    { value: 'Swiss' },\\n    { value: 'Feta' },\\n    { value: 'Mascarpone' },\\n    { value: 'Brie' },\\n    { value: 'Mozzarella' },\\n    { value: 'Cotija' },\\n    { value: 'Pepperjack' },\\n  ]}\\n  isFilterable\\n  placeholder=\\\"Type values or select from the list\\\"\\n  freeInput\\n/>\\n\")), mdx(\"h2\", null, \"removeOnBackspace\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"removeOnBackspace\"), \" prop inherits from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/forms/input-chips/#removeonbackspace\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputChips\")), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":"file/2MG6DoSjk4IaLnjjFCnKFf/Forms","github":"Form/Inputs/Select/SelectMulti.tsx","propsOf":"SelectMulti","status":null,"title":"SelectMulti"},"tableOfContents":{"items":[{"url":"#showcreate","title":"showCreate"},{"url":"#closeonselect","title":"closeOnSelect"},{"url":"#freeinput","title":"freeInput"},{"url":"#removeonbackspace","title":"removeOnBackspace"}]}}},"pageContext":{"id":"d2816e99-3fb8-5811-81b5-4aca87513bdf"}}}