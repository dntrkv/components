{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/dialogs/layout/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"32788d16-6148-538f-a5df-5753700abcdc","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dialog Layout\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"DialogContent\"), mdx(Props, {\n    of: \"DialogContent\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DialogContent\"), \" component quickly gives your content consistent spacing inside a dialog component as well as managing overflow of content of the dialog is taller than the viewport.\"), mdx(\"p\", null, \"DialogContent supports all \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/src-documentation-components-box\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Box\")), \" properties.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<DialogContent>\\n  <Box height=\\\"2rem\\\" bg=\\\"rebeccapurple\\\" />\\n</DialogContent>\\n\")), mdx(\"p\", null, \"If content overflows the component's height an visual indicator of content that extends beyond the visible edges is added (border on top and shadow on the bottom).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Box height=\\\"10rem\\\" display=\\\"flex\\\" bg=\\\"white\\\" p=\\\"large\\\">\\n  <DialogContent>\\n    <Paragraph>Scroll down here...</Paragraph>\\n    <Box height=\\\"6rem\\\" bg=\\\"rebeccapurple\\\" />\\n  </DialogContent>\\n</Box>\\n\")), mdx(\"h2\", null, \"DialogHeader\"), mdx(Props, {\n    of: \"DialogHeader\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DialogHeader\"), \" is attached to the top of dialog and provides a button to close the containing Dialog. Uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DialogContext\"), \" to get access to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"close\"), \" callback.\"), mdx(\"p\", null, \"DialogHeader supports all \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/src-documentation-components-box\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Box\")), \" properties.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hideClose\"), \" property remove the \\\"close\\\" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IconButton\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"detail\"), \" property allows the developer to specify a ReactNode that will replace the \\\"close\\\" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IconButton\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<DialogHeader>This is a DialogHeader</DialogHeader>\\n\")), mdx(\"h2\", null, \"DialogFooter\"), mdx(Props, {\n    of: \"DialogFooter\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DialogFooter\"), \" is attached to the bottom of dialog. Generally, the terminal action for a dialog as well as an option to abandon the process done via the dialog are available within this component. This component is generally used in combination with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DialogContext.Provider\"), \" to get access to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DialogContext.close()\"), \" method.\"), mdx(\"p\", null, \"DialogFooter supports all \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/src-documentation-components-box\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Box\")), \" properties.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<DialogFooter>\\n  <Button>Save Changes</Button>\\n</DialogFooter>\\n<Divider />\\n<DialogFooter>\\n  <Button>Save Changes</Button>\\n  <ButtonTransparent>Cancel</ButtonTransparent>\\n</DialogFooter>\\n<Divider />\\n<DialogFooter\\n  secondary={\\n    <ButtonOutline iconBefore=\\\"Plus\\\">\\n      Create Item\\n    </ButtonOutline>\\n  }\\n>\\n  <Button>Save Changes</Button>\\n  <ButtonTransparent>Cancel</ButtonTransparent>\\n</DialogFooter>\\n<Divider />\\n<DialogFooter\\n  secondary={\\n    <React.Fragment>\\n      <ButtonOutline iconBefore=\\\"Plus\\\">\\n        Create Item\\n      </ButtonOutline>\\n      <ButtonOutline iconBefore=\\\"Plus\\\">\\n        Yet Another\\n      </ButtonOutline>\\n    </React.Fragment>\\n  }\\n>\\n  <Button>Save Changes</Button>\\n  <ButtonTransparent>Cancel</ButtonTransparent>\\n</DialogFooter>\\n<Divider />\\n<DialogContent>\\n  <Box bg=\\\"lavender\\\" p=\\\"medium\\\">\\n    Example content\\n  </Box>\\n</DialogContent>\\n<DialogFooter>\\n  <Button size=\\\"xsmall\\\">Save Changes</Button>\\n  <ButtonTransparent size=\\\"xsmall\\\">\\n    Cancel\\n  </ButtonTransparent>\\n</DialogFooter>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":null,"propsOf":null,"status":null,"title":"Dialog Layout"},"tableOfContents":{"items":[{"url":"#dialogcontent","title":"DialogContent"},{"url":"#dialogheader","title":"DialogHeader"},{"url":"#dialogfooter","title":"DialogFooter"}]}}},"pageContext":{"id":"32788d16-6148-538f-a5df-5753700abcdc"}}}