{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/dialogs/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"c1bb0e03-16c1-5257-831f-9e100da43c7f","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dialog\",\n  \"propsOf\": \"Dialog\",\n  \"github\": \"Dialog/Dialog.tsx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Dialogs break out of the standard application flow and UI to present new information or required actions.\"), mdx(MessageBar, {\n    intent: \"warn\",\n    mdxType: \"MessageBar\"\n  }, \"Dialog provides a general purpose (empty & unstyled) overlay.\", ' ', mdx(\"a\", {\n    href: \"./confirm\"\n  }, \"Confirm\"), \" will likely be more useful if your intent is to render a standard user confirmation dialog.\"), mdx(\"h2\", null, \"Standard Use\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dialog\"), \" requires that the developer manages state by assigning \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const { value, setOn, setOff } = useToggle()\\n  return (\\n    <div>\\n      <Dialog isOpen={value} onClose={() => setOff()}>\\n        <DialogHeader>A Dialog Example</DialogHeader>\\n        <DialogContent>\\n          <SpaceVertical>\\n            <Paragraph>\\n              {`Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin pellentesque dui sodales efficitur vehicula. Praesent at aliquet nisi. Fusce risus quam, scelerisque non lacus mollis, feugiat molestie sem. Praesent augue erat, molestie id sem quis, fermentum venenatis lacus. Morbi vehicula lacus id fringilla scelerisque. Nulla dignissim nisi nisl, ac porttitor orci accumsan nec. Vestibulum pulvinar risus felis, vel bibendum odio luctus a. Morbi pharetra, ipsum sit amet vehicula malesuada, lacus quam viverra sapien, eget malesuada sem risus quis ligula. Vestibulum non laoreet est. Nullam blandit sollicitudin cursus. Nam cursus nisl id ipsum ullamcorper consequat.`}\\n            </Paragraph>\\n            <Paragraph>\\n              {`Aenean consectetur volutpat dolor id varius. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nam mollis, sapien sit amet suscipit consectetur, odio metus malesuada arcu, et eleifend nisi lorem eu diam. Praesent malesuada finibus finibus. Suspendisse eu lobortis ante, sed gravida odio. Nam auctor eros nulla. Praesent maximus ligula quam, et pretium lacus vulputate non. Donec condimentum turpis vitae mi volutpat malesuada. Nam sagittis non metus in efficitur. Vestibulum commodo nibh velit, sed luctus felis condimentum non.`}\\n              `\\n            </Paragraph>\\n            <Paragraph>\\n              {`Aenean consectetur volutpat dolor id varius. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nam mollis, sapien sit amet suscipit consectetur, odio metus malesuada arcu, et eleifend nisi lorem eu diam. Praesent malesuada finibus finibus. Suspendisse eu lobortis ante, sed gravida odio. Nam auctor eros nulla. Praesent maximus ligula quam, et pretium lacus vulputate non. Donec condimentum turpis vitae mi volutpat malesuada. Nam sagittis non metus in efficitur. Vestibulum commodo nibh velit, sed luctus felis condimentum non.`}\\n            </Paragraph>\\n          </SpaceVertical>\\n        </DialogContent>\\n        <DialogFooter>\\n          <Button onClick={setOff}>Close Example Dialog</Button>\\n          <ButtonTransparent color=\\\"neutral\\\" onClick={setOff}>\\n            Cancel\\n          </ButtonTransparent>\\n        </DialogFooter>\\n      </Dialog>\\n      <Button onClick={() => setOn()}>Open Dialog</Button>\\n    </div>\\n  )\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dialog\"), \" is a container for content that sits above the application's content. They are temporary overlays that offer contextual information or require user input/confirmation while blocking interactions with the application until being explicitly dismissed.\"), mdx(\"h2\", null, \"Terminology\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dialogs\"), \" are assembled of two pieces: an overlay and a surface. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Backdrop\"), \" component is the semi-opaque full-screen overlay which signals that the the rest of the application is inaccessible. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Surface\"), \" component sits on top of the overlay and renders the relevant content.\"), mdx(\"p\", null, \"The most common pattern for a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dialog\"), \" is the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/dialogs/confirm\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Confirm\")), \" pattern.\"), mdx(\"h3\", null, \"Backdrop\"), mdx(\"p\", null, \"This provides the backdrop behind dialogs. It can be customized via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"backdrop\"), \" property. These must be a CSSProperty compatible key / value paired object.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<DialogManager\\n  backdrop={{ background: 'purple', opacity: 1 }}\\n  content={<>Stuff and text</>}\\n>\\n  <Button>Purple Backdrop</Button>\\n</DialogManager>\\n\")), mdx(\"h3\", null, \"Surface\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Surface\"), \" provides the container that contains the content. It can be customized via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"surfaceStyles\"), \" property. These must be a CSSProperty compatible key / value paired object.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Surface\\n  surfaceStyles={{ background: 'pink', borderRadius: 0, padding: '3rem' }}\\n>\\n  Stuff and text\\n</Surface>\\n\")), mdx(\"h2\", null, \"DialogManager\"), mdx(\"p\", null, \"DialogManager gives an easy way to compose a Dialog without the need to manage open/close state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<DialogManager\\n  content={\\n    <DialogContent>\\n      <Paragraph>Some content inside the Dialog</Paragraph>\\n      <Button>A button too!</Button>\\n    </DialogContent>\\n  }\\n>\\n  <Button>Open Dialog </Button>\\n</DialogManager>\\n\")), mdx(\"h2\", null, \"Props: width and maxWidth\"), mdx(\"p\", null, \"All variants of Dialog allow you to override \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"width\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max-width\"), \" styles to suit your content. By default, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"width\"), \" is unassigned so that Dialog Surface will conform to the width of its content. At the same time, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxWidth\"), \" constrains the Dialog surface's width to be no larger than the specified value.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxWidth\"), \" defaults to one of three sizes depending on the responsive breakpoint of the page (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"['90vw', '90vw', '600px']\"), \").\"), mdx(\"p\", null, \"With those constraints in mind, if you want a variable-width Dialog that renders complex content you should use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxWidth\"), \". If your Dialog content must be a specific predefined width, assign values to both props (or else \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxWidth\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://css-tricks.com/tale-width-max-width/\"\n  }), \"will take priority\"), \").\"), mdx(\"p\", null, \"The props accept responsive width arrays an well as static strings.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<DialogManager\\n  content={\\n    <DialogContent>\\n      <Heading>\\n        Resize your browser to watch maxWidth adjust accordingly\\n      </Heading>\\n      <Paragraph>\\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc et eros\\n        sed nisi pellentesque vulputate ac eu augue. Sed commodo sagittis neque,\\n        vel vulputate massa.\\n      </Paragraph>\\n    </DialogContent>\\n  }\\n  /**\\n   * Responsive array values are passed from smallest to largest breakpoints:\\n   */\\n  maxWidth={['90vw', '60vw', '500px', '800px']}\\n>\\n  <Button>Open responsive width dialog</Button>\\n</DialogManager>\\n\")), mdx(\"h2\", null, \"DialogContext\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"import React, { useContext } from 'react'\\nimport { Button, DialogContext } from '@looker/components'\\n\\nexport function DialogContextDemo() {\\n  return (\\n    <DialogContext.Consumer>\\n      {({ close }) => <Button onClick={close}>Close!</Button>}\\n    </DialogContext.Consumer>\\n  )\\n}\\n\\nexport function DailogUseContextDemo() {\\n  const { close } = useContext(DialogContext)\\n  return <Button onClick={close}>Close!</Button>\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DialogContext\"), \" is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/context.html\"\n  }), \"React Context\"), \" that provides access to functionality without requiring the developer to explicitly manage the Dialog's state. The context provides access to the following methods:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"close\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"enableFocusTrap\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"disableFocusTrap\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"enableScrollLock\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"disableScrollLock\"))), mdx(\"p\", null, \"As well as the following values:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"scrollLockEnabled\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"focusTrapEnabled\"))), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"close\"), \" method simply allows you to close the Dialog or Popover.\"), mdx(\"p\", null, \"The other methods and values above are for rare use when the dialog behaviors of focus trap and scroll lock are interfering with the desired behavior. For example a popover from another library nested inside of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@looker/components\"), \" Popover or Dialog.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Dialog/Dialog.tsx","propsOf":"Dialog","status":null,"title":"Dialog"},"tableOfContents":{"items":[{"url":"#standard-use","title":"Standard Use"},{"url":"#terminology","title":"Terminology"},{"url":"#dialogmanager","title":"DialogManager"},{"url":"#props-width-and-maxwidth","title":"Props: width and maxWidth"},{"url":"#dialogcontext","title":"DialogContext"}]}}},"pageContext":{"id":"c1bb0e03-16c1-5257-831f-9e100da43c7f"}}}