{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/message-bar/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"b03f6d90-a042-57aa-b5fc-8be5d0b301bd","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"MessageBar\",\n  \"propsOf\": \"MessageBar\",\n  \"github\": \"MessageBar\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<MessageBar />\"), \" component is used to alert the user with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"warn\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"critical\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inform\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"positive\"), \" messages, settable via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"intent\"), \" property. If no intent is set, it will fall back to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inform\"), \" by default.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<SpaceVertical gap=\\\"xsmall\\\">\\n  <MessageBar intent=\\\"inform\\\">Inform (default)</MessageBar>\\n  <MessageBar intent=\\\"warn\\\">Warning</MessageBar>\\n  <MessageBar intent=\\\"positive\\\">Positive</MessageBar>\\n  <MessageBar intent=\\\"critical\\\">Critical</MessageBar>\\n</SpaceVertical>\\n\")), mdx(\"h2\", null, \"canDismiss\"), mdx(\"p\", null, \"If you don't want the MessageBar to be clearable, you can remove the close button by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"canDismiss\"), \" to false.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<MessageBar canDismiss={false}>I can never be closed</MessageBar>\\n\")), mdx(\"h2\", null, \"Controlled Component Pattern\"), mdx(\"p\", null, \"MessageBar will accept an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onDismiss\"), \" callback along with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"visible\"), \" boolean prop for use in the controlled component pattern. This can be useful if you wish to toggle display externally or provide an Undo option.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const { value, setOff, setOn } = useToggle(true)\\n  return (\\n    <>\\n      <MessageBar intent=\\\"warn\\\" onDismiss={setOff} visible={value}>\\n        I can be closed and reopened\\n      </MessageBar>\\n      {!value && (\\n        <ButtonOutline m=\\\"medium\\\" onClick={setOn}>\\n          Show MessageBar\\n        </ButtonOutline>\\n      )}\\n    </>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"MessageBar","propsOf":"MessageBar","status":null,"title":"MessageBar"},"tableOfContents":{"items":[{"url":"#candismiss","title":"canDismiss"},{"url":"#controlled-component-pattern","title":"Controlled Component Pattern"}]}}},"pageContext":{"id":"b03f6d90-a042-57aa-b5fc-8be5d0b301bd"}}}