{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/list/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"ff8e7a0d-10bc-5786-9841-2af5c61bade9","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"List\",\n  \"github\": \"List\",\n  \"propsOf\": \"List\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"By default a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<List />\"), \" component will render as an unordered list, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ul>\"), \" tag, with no marker. Each item in the list should be wrapped in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ListItem />\"), \" component. Below is an example of creating a list of links using the default list behavior.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<List>\\n  <ListItem>\\n    <Link href=\\\"./card\\\">Card</Link>\\n  </ListItem>\\n  <ListItem>\\n    <Link href=\\\"../actions/link\\\">Link</Link>\\n  </ListItem>\\n  <ListItem>\\n    <Link href=\\\"../typography/heading\\\">Heading</Link>\\n  </ListItem>\\n</List>\\n\")), mdx(\"h2\", null, \"List Types\"), mdx(\"p\", null, \"Often times you want to have a marker before each item in your list, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" property to change list marker and also the semantic html tag used to wrap the list.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"  <List>\\n    <ListItem>An unordered list</ListItem>\\n    <ListItem>\\n      Wraps in a <Code>&lt;ul&gt;</Code> tag\\n    </ListItem>\\n    <ListItem>No marker</ListItem>\\n  </List>\\n  <List type=\\\"bullet\\\">\\n    <ListItem>An unordered list</ListItem>\\n    <ListItem>\\n      Wraps in a <Code>&lt;ul&gt;</Code> tag\\n    </ListItem>\\n    <ListItem>Bullet marker</ListItem>\\n  </List>\\n  <List type=\\\"number\\\">\\n    <ListItem>An orderd list</ListItem>\\n    <ListItem>\\n      Wraps in a <Code element=\\\"code\\\">&lt;ol&gt;</Code> tag\\n    </ListItem>\\n    <ListItem>Number marker</ListItem>\\n  </List>\\n  <List type=\\\"letter\\\">\\n    <ListItem>An ordered list</ListItem>\\n    <ListItem>\\n      Wraps in a <Code>&lt;ol&gt;</Code> tag\\n    </ListItem>\\n    <ListItem>Alpha marker</ListItem>\\n  </List>\\n\")), mdx(\"h2\", null, \"Hiding the List marker\"), mdx(\"p\", null, \"If for semantic reasons you need an ordered list but do not want to display the marker, you can control that with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nomarker\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<List type=\\\"number\\\" nomarker>\\n  <ListItem>I am an ordered list</ListItem>\\n  <ListItem>But I do not have a marker</ListItem>\\n  <ListItem>That is neat</ListItem>\\n</List>\\n\")), mdx(\"h2\", null, \"List Item\"), mdx(Props, {\n    of: \"ListItem\",\n    github: \"List/ListItem\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"This component renders an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<li>\"), \" tag inside of a list\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"List","propsOf":"List","status":null,"title":"List"},"tableOfContents":{"items":[{"url":"#list-types","title":"List Types"},{"url":"#hiding-the-list-marker","title":"Hiding the List marker"},{"url":"#list-item","title":"List Item"}]}}},"pageContext":{"id":"ff8e7a0d-10bc-5786-9841-2af5c61bade9"}}}